// Code generated by "enumer -type=timeQuantum -trimprefix=timeQuantum -text -transform=caps -output enums_timequantum.go"; DO NOT EDIT.

package imagine

import (
	"fmt"
)

const _timeQuantumName = "YYMYMDYMDH"

var _timeQuantumIndex = [...]uint8{0, 1, 3, 6, 10}

func (i timeQuantum) String() string {
	if i < 0 || i >= timeQuantum(len(_timeQuantumIndex)-1) {
		return fmt.Sprintf("timeQuantum(%d)", i)
	}
	return _timeQuantumName[_timeQuantumIndex[i]:_timeQuantumIndex[i+1]]
}

var _timeQuantumValues = []timeQuantum{0, 1, 2, 3}

var _timeQuantumNameToValueMap = map[string]timeQuantum{
	_timeQuantumName[0:1]:  0,
	_timeQuantumName[1:3]:  1,
	_timeQuantumName[3:6]:  2,
	_timeQuantumName[6:10]: 3,
}

// timeQuantumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func timeQuantumString(s string) (timeQuantum, error) {
	if val, ok := _timeQuantumNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to timeQuantum values", s)
}

// timeQuantumValues returns all values of the enum
func timeQuantumValues() []timeQuantum {
	return _timeQuantumValues
}

// IsAtimeQuantum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i timeQuantum) IsAtimeQuantum() bool {
	for _, v := range _timeQuantumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for timeQuantum
func (i timeQuantum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeQuantum
func (i *timeQuantum) UnmarshalText(text []byte) error {
	var err error
	*i, err = timeQuantumString(string(text))
	return err
}
