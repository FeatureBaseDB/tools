// Code generated by "enumer -type=fieldType -trimprefix=fieldType -transform=kebab -text -output enums_fieldtype.go"; DO NOT EDIT.

package imagine

import (
	"fmt"
)

const _fieldTypeName = "undefbsisetmutextime"

var _fieldTypeIndex = [...]uint8{0, 5, 8, 11, 16, 20}

func (i fieldType) String() string {
	if i < 0 || i >= fieldType(len(_fieldTypeIndex)-1) {
		return fmt.Sprintf("fieldType(%d)", i)
	}
	return _fieldTypeName[_fieldTypeIndex[i]:_fieldTypeIndex[i+1]]
}

var _fieldTypeValues = []fieldType{0, 1, 2, 3, 4}

var _fieldTypeNameToValueMap = map[string]fieldType{
	_fieldTypeName[0:5]:   0,
	_fieldTypeName[5:8]:   1,
	_fieldTypeName[8:11]:  2,
	_fieldTypeName[11:16]: 3,
	_fieldTypeName[16:20]: 4,
}

// fieldTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func fieldTypeString(s string) (fieldType, error) {
	if val, ok := _fieldTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to fieldType values", s)
}

// fieldTypeValues returns all values of the enum
func fieldTypeValues() []fieldType {
	return _fieldTypeValues
}

// IsAfieldType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i fieldType) IsAfieldType() bool {
	for _, v := range _fieldTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for fieldType
func (i fieldType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for fieldType
func (i *fieldType) UnmarshalText(text []byte) error {
	var err error
	*i, err = fieldTypeString(string(text))
	return err
}
