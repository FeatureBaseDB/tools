// Code generated by "enumer -type=cacheType -trimprefix=cacheType -text -transform=kebab -output enums_cachetype.go"; DO NOT EDIT.

package main

import (
	"fmt"
)

const _cacheTypeName = "defaultnonelru"

var _cacheTypeIndex = [...]uint8{0, 7, 11, 14}

func (i cacheType) String() string {
	if i < 0 || i >= cacheType(len(_cacheTypeIndex)-1) {
		return fmt.Sprintf("cacheType(%d)", i)
	}
	return _cacheTypeName[_cacheTypeIndex[i]:_cacheTypeIndex[i+1]]
}

var _cacheTypeValues = []cacheType{0, 1, 2}

var _cacheTypeNameToValueMap = map[string]cacheType{
	_cacheTypeName[0:7]:   0,
	_cacheTypeName[7:11]:  1,
	_cacheTypeName[11:14]: 2,
}

// cacheTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func cacheTypeString(s string) (cacheType, error) {
	if val, ok := _cacheTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to cacheType values", s)
}

// cacheTypeValues returns all values of the enum
func cacheTypeValues() []cacheType {
	return _cacheTypeValues
}

// IsAcacheType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i cacheType) IsAcacheType() bool {
	for _, v := range _cacheTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for cacheType
func (i cacheType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for cacheType
func (i *cacheType) UnmarshalText(text []byte) error {
	var err error
	*i, err = cacheTypeString(string(text))
	return err
}
